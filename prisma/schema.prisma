// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())

  activity   Activity  @relation(fields: [activityId], references: [id])
  activityId String
  user      User    @relation(fields: [userId], references: [id])
  userId    String
}

model Activity {
  id          String   @id @default(cuid())
  image       String?
  title       String
  description String
  price       Float
  unit        String
  rating      Float?
  location    String
  city        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  cartItems   CartItem[]
  orderItems   OrderItem[]
  comments    Comment[] 
  owner       User     @relation(name: "UserOnActivity", fields: [ownerId], references: [id])
  ownerId     String
  likes       User[]  @relation(name: "UserOnActivityLikes") 
  likesId     String[] 
}

model CartItem {
  id          String   @id @default(cuid())
  cart        Cart @relation(fields: [cartId], references: [id])
  cartId      String
  activity    Activity @relation(fields: [activityId], references: [id])
  activityId  String
  quantity    Int
  dateEvent   Int?
}

model Cart {
  id          String   @id @default(cuid())
  user        User    @relation(fields: [userId], references: [id])
  userId      String  @unique
  items       CartItem[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Order {
  orderId      Int         @id @default(autoincrement())
  totalAmount  Float
  orderDate    DateTime    @default(now())
  userId       String
  user          User        @relation(fields: [userId], references: [id])
  orderItems    OrderItem[]
}

model OrderItem {
  itemId       Int         @id @default(autoincrement())
  quantity      Int
  price         Float
  dateEvent   Int?
  orderId      Int
  activityId    String
  order         Order       @relation(fields: [orderId], references: [orderId])
  activity      Activity     @relation(fields: [activityId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String   @unique
  emailVerified DateTime?
  image         String?
  role          String @default("user")

  orders        Order[]
  cart          Cart?
  comments      Comment[]
  accounts      Account[]
  sessions      Session[]
  listedActivity   Activity[] @relation(name: "UserOnActivity")
  favoriteActivities Activity[] @relation(name: "UserOnActivityLikes")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
